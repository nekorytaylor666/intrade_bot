const Scene = require('telegraf/scenes/base');
const { Extra, Markup } = require('telegraf');
const orders = new Scene('orders');

orders.enter(async ctx => {
  ctx.reply(
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã.',
    Markup.keyboard([
      ['üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'], // Row1 with 2 buttons
      ['üìÉ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'], // Row2 with 2 buttons
      ['‚òéÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã'], // Row3 with 3 buttons
      ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], // Row3 with 3 buttons
    ])
      .resize()
      .extra(),
  );
});

orders.hears('üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', ctx => {
  ctx.scene.enter('orderReg');
});
orders.hears('üìÉ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', ctx => {
  ctx.scene.enter('orderList');
});
orders.hears('‚õè –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ', ctx => {
  ctx.reply('–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
});
orders.hears('‚òéÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', ctx => {
  ctx.reply(
    '–í—Å–µ –∑–∞–∫–∞–∑—ã –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ.',
    Markup.inlineKeyboard(
      [
        Markup.urlButton(
          '–∫–∞–Ω–∞–ª Intrade',
          `https://t.me/intrade_providers`,
        ),
      ],
      {
        columns: 1,
      },
    ).extra(),
  );
});
orders.hears('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ctx => {
  ctx.scene.enter('menu');
});

orders.use(ctx => {
  ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.');
});

module.exports = orders;
