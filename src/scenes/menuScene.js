const Scene = require('telegraf/scenes/base');
const Markup = require('telegraf/markup');

const providerFillHandler = require('../helpers/providerFillHandler/providerFillHandler');
const acceptHandler = require('../helpers/acceptHandler/acceptHandler');

const menuScene = new Scene('menu');

//menu scene enter
menuScene.enter(ctx => {
  if (typeof ctx.session.user === 'undefined') {
    return ctx.scene.enter('auth');
  }
  return ctx.reply(
    '–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≥–¥–µ –∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ.',
    Markup.keyboard([
      ['üì∞ –ó–∞–∫–∞–∑—ã'], // Row1 with 2 buttons
      ['‚ò∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ùî –ü–æ–º–æ—â—å'], // Row2 with 2 buttons
      ['üìà –û–ø–ª–∞—Ç–∞', 'üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã'], // Row3 with 3 buttons
    ])
      .oneTime()
      .resize()
      .extra(),
  );
});
menuScene.hears('üì∞ –ó–∞–∫–∞–∑—ã', async ctx => {
  const user = ctx.session.user;
  if (!user.companyName || !user.email) {
    await ctx.reply(
      '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å.',
    );
    return ctx.scene.enter('contactEdit');
  }
  ctx.scene.enter('orders');
});

menuScene.hears('‚ò∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', ctx => {
  ctx.scene.enter('settings');
});

menuScene.hears('‚ùî –ü–æ–º–æ—â—å', ctx => {
  ctx.scene.enter('help');
});

menuScene.use(providerFillHandler);
menuScene.use(acceptHandler);

menuScene.on('callback_query', ctx => {
  ctx.answerCbQuery(
    '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
  );
});

menuScene.use(ctx => {
  ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.');
});

module.exports = menuScene;
