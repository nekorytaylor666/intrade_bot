/* eslint-disable @typescript-eslint/no-var-requires */
const Scene = require('telegraf/scenes/base');
const User = require('../models/User');
const authScene = new Scene('auth');
const Stage = require('telegraf/stage');
const { enter, leave } = Stage;

//menu scene enter
authScene.enter(async ctx => {
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
    reply_markup: {
      keyboard: [
        [
          {
            text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            request_contact: true,
            //ask permission to send their contact number
          },
        ],
      ],
    },
  });
});

authScene.on('contact', async ctx => {
  //we need to check to user id with contact id to prevent cending another user contacts
  const user_id = ctx.message.from.id;
  const contact_id = ctx.message.from.id;
  if (user_id === contact_id) {
    User.findOne(
      {
        telegramUserId: user_id,
      },
      async function(err, user) {
        if (err) {
          console.log(err);
        }
        //if a user was found we just put him in the session, else we create new one by request
        if (user) {
          ctx.session.user = user;
          await ctx.reply(
            `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.firstName}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ intrade bot!`,
            {
              reply_markup: {
                remove_keyboard: true,
              },
            },
          );
        } else {
          const { first_name, last_name } = ctx.message.from;

          const phone_number = ctx.message.contact.phone_number;

          const newUser = new User({
            phoneNumber: phone_number,
            firstName: first_name,
            lastName: last_name,
            telegramUserId: user_id,
            isPremium: false,
          });

          try {
            const db_user = await newUser.save();
            ctx.session.user = db_user;

            await ctx.reply(
              `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${first_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã intrade bot!`,
              {
                reply_markup: {
                  remove_keyboard: true,
                },
              },
            );
          } catch (error) {
            ctx.reply(
              `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å –≤–∞—à–µ–π –æ—à–∏–±–∫–æ–π nekorytaylor2@gmail.com.\n\n ${error}`,
            );
          }
        }
        leave();
        return ctx.scene.enter('menu');
      },
    );
  } else {
    ctx.reply(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é.',
    );
    return enter('auth');
  }
});

module.exports = authScene;
