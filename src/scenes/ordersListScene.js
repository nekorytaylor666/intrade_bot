const Scene = require('telegraf/scenes/base');
const orderListScene = new Scene('orderList');
const { Markup } = require('telegraf');
const sendOrderToChannel = require('../tools/channelMessagesMethods')
  .sendOrderToChannel;

const User = require('../models/User');
const Order = require('../models/Order');

orderListScene.enter(async ctx => {
  const user = ctx.session.user;
  const orders = await Order.find({ customer: user._id })
    .lean()
    .limit(50);
  ctx.scene.session.orders = orders;
  if (orders.length === 0) {
    ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
    return ctx.scene.enter('orders');
  }
  if (orders.length > 0) {
    let ordersListMsg = '';
    let emojiStatus = '';
    orders.map((order, index) => {
      const { status, description } = order;
      let statusPart = '';
      if (status === 'Moderating') {
        emojiStatus = 'üë®üèº‚Äçüíª';
        statusPart =
          '–ó–∞–∫–∞–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏';
      } else if (status === 'Public') {
        emojiStatus = 'üîä';
        statusPart = `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ. ‚úÖ –û—Ç–∫–ª–∏–∫–æ–≤: ${order.callbackClicks}`;
      } else if (status === 'Confirmed') {
        emojiStatus = 'üÜó';
        statusPart = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ.`;
      } else if (status === 'Outdated') {
        emojiStatus = 'üí§';
        statusPart = `–£–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /return ${index +
          1}, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –∫–∞–Ω–∞–ª.`;
      } else if (status === 'Solved') {
        emojiStatus = '‚öí';
        statusPart = '–ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.';
      }

      ordersListMsg = ordersListMsg.concat(
        `${index + 1}: `,
        `${emojiStatus} `,
        description,
        '\n',
        statusPart,
        '\n\n',
      );
    });
    ctx.reply(
      ordersListMsg,
      Markup.keyboard([['‚¨ÖÔ∏è –ó–∞–∫–∞–∑—ã']])
        .resize()
        .extra(),
    );
  }
});

orderListScene.hears(/\/return (.*)/, async ctx => {
  const orders = ctx.scene.session.orders;
  if (orders.length > 0) {
    const orderIndex = ctx.match[1] - 1;
    if (orderIndex < 0) {
      return ctx.reply('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç');
    }
    if (orders[orderIndex].status === 'Outdated') {
      const orderId = orders[orderIndex]._id;
      await sendOrderToChannel(ctx, orderId);
      ctx.reply('–ó–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª');
    }
    return ctx.reply(
      '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∑–∞–∫–∞–∑–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞.',
    );
  }
});

orderListScene.hears('‚¨ÖÔ∏è –ó–∞–∫–∞–∑—ã', ctx => {
  ctx.scene.leave();
  ctx.scene.enter('orders');
});

orderListScene.use(ctx => {
  ctx.reply('–Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É.');
});

module.exports = orderListScene;
