const Composer = require('telegraf/composer');
const Markup = require('telegraf/markup');

const citiesStepHandler = new Composer();

const CITIES = [
  'Astana',
  'Almaty',
  'Karagandy',
  'Shymkent',
  'Atyrau',
  'Aktau',
];

citiesStepHandler.hears('–ù–∞–∑–∞–¥', ctx => {
  ctx.reply(`–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–∞–ø 2/3`);
  ctx.scene.session.fileId = null;
  ctx.wizard.back(); // Set the listener to the previous function
  ctx.wizard.back(); // Set the listener to the previous function
  return ctx.wizard.steps[ctx.wizard.cursor](ctx);
});

citiesStepHandler.hears('–î–∞–ª–µ–µ', ctx => {
  const choosenCities =
    typeof ctx.scene.session.cities !== 'undefined'
      ? [...ctx.scene.session.cities]
      : [];
  const availableCities =
    typeof ctx.scene.session.availableCities !== 'undefined'
      ? [...ctx.scene.session.availableCities]
      : [...CITIES];
  const choosenCitiesInlineButton = choosenCities.map(cityName =>
    Markup.callbackButton(`‚úÖ ${cityName}`, `city ${cityName}`),
  );
  const availableCitiesInlineButton = availableCities.map(cityName =>
    Markup.callbackButton(cityName, `city ${cityName}`),
  );
  ctx.reply(
    `–≠—Ç–∞–ø 3/5
    –ï—â–µ —á—É—Ç—å —á—É—Ç—å!
    
    –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω—É–∂–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫`,
    Markup.inlineKeyboard(
      choosenCitiesInlineButton.concat(
        availableCitiesInlineButton,
        Markup.callbackButton(`All`, `city All`),
      ),
      {
        columns: 1,
      },
    ).extra(),
  );
});

citiesStepHandler.action(/(?![city])\b(?!\s)([\w]*)/gm, ctx => {
  if (ctx.match[0] === 'All') {
    const choosenCities = [...CITIES];
    const availableCities = [];

    ctx.scene.session.cities = choosenCities;
    ctx.scene.session.availableCities = availableCities;

    const availableCitiesInlineButton = availableCities.map(
      cityName => Markup.callbackButton(cityName, `city ${cityName}`),
    );
    const choosenCitiesInlineButton = choosenCities.map(cityName =>
      Markup.callbackButton(`‚úÖ ${cityName}`, `city ${cityName}`),
    );
    ctx.editMessageText(
      `–≠—Ç–∞–ø 3/5
      –ï—â–µ —á—É—Ç—å —á—É—Ç—å!
        
      –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω—É–∂–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫`,
      Markup.inlineKeyboard(
        choosenCitiesInlineButton.concat(
          availableCitiesInlineButton,
          Markup.callbackButton(`All`, `city All`),
        ),
        {
          columns: 1,
        },
      ).extra(),
    );
    return ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥(-–∞) ${choosenCities.map(
        city => `${city}`,
      )}! –ù–∞–∂–º–∏—Ç–µ "–æ–∫", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`,
      Markup.keyboard([['üÜó –û–∫']])
        .oneTime()
        .resize()
        .extra(),
    );
  }

  const availableCities =
    typeof ctx.scene.session.availableCities !== 'undefined'
      ? [...ctx.scene.session.availableCities]
      : [...CITIES];

  const cities =
    typeof ctx.scene.session.cities !== 'undefined'
      ? [...ctx.scene.session.cities]
      : [];
  const choosenCity = ctx.match[0];
  const indexOfChoosenCity = cities.indexOf(choosenCity);

  if (indexOfChoosenCity === -1) {
    cities.push(choosenCity);
    availableCities.splice(availableCities.indexOf(choosenCity), 1);
  }
  if (indexOfChoosenCity !== -1) {
    cities.splice(indexOfChoosenCity, 1);
    availableCities.push(choosenCity);
  }

  ctx.scene.session.cities = cities;
  ctx.scene.session.availableCities = availableCities;

  const choosenCitiesInlineButton = cities.map(cityName =>
    Markup.callbackButton(`‚úÖ ${cityName}`, `city ${cityName}`),
  );
  const availableCitiesInlineButton = availableCities.map(cityName =>
    Markup.callbackButton(cityName, `city ${cityName}`),
  );

  ctx.editMessageText(
    `–≠—Ç–∞–ø 3/5
    –ï—â–µ —á—É—Ç—å —á—É—Ç—å!
    
    –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω—É–∂–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫`,
    Markup.inlineKeyboard(
      choosenCitiesInlineButton.concat(
        availableCitiesInlineButton,
        Markup.callbackButton(`All`, `city All`),
      ),
      {
        columns: 1,
      },
    ).extra(),
  );
  return ctx.reply(
    `–ì–æ—Ä–æ–¥(-–∞):${cities.map(city => `${city}`)}!`,
    Markup.keyboard([['üÜó –û–∫']])
      .oneTime()
      .resize()
      .extra(),
  );
});

citiesStepHandler.hears('üÜó –û–∫', ctx => {
  const cities =
    typeof ctx.scene.session.cities !== 'undefined'
      ? [...ctx.scene.session.cities]
      : ['–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤'];
  if (cities.length < 1) {
    return ctx.reply(
      '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –ø–æ –º–µ–Ω—å—à–µ–π –º–µ—Ä–µ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥!',
    );
  }
  ctx.reply(
    `–í–∞—à –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ ${cities.map(
      city => `${city}`,
    )}!`,
    Markup.keyboard([['–î–∞–ª–µ–µ'], ['–ù–∞–∑–∞–¥']])
      .oneTime()
      .resize()
      .extra(),
  );
  return ctx.wizard.next();
});

citiesStepHandler.use(ctx => {
  ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.');
});

module.exports = citiesStepHandler;
