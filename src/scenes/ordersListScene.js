const Scene = require('telegraf/scenes/base');
const { Extra, Markup } = require('telegraf');
const orderListScene = new Scene('orderList');

const User = require('../models/User');
const Order = require('../models/Order');

orderListScene.enter(async ctx => {
  const user = ctx.session.user;
  const orders = await Order.find({ customer: user._id })
    .lean()
    .limit(50);
  let ordersListMsg = '';
  let emojiStatus = '';
  orders.map((order, index) => {
    const { status, description } = order;
    let statusPart = '';
    if (status === 'Moderating') {
      emojiStatus = 'üë®üèº‚Äçüíª';
      statusPart =
        '–ó–∞–∫–∞–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏';
    } else if (status === 'Public') {
      emojiStatus = 'üîä';
      statusPart = `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ. ‚úÖ –û—Ç–∫–ª–∏–∫–æ–≤: ${order.callbackClicks}`;
    } else if (status === 'Confirmed') {
      emojiStatus = 'üÜó';
      statusPart = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ.`;
    } else if (status === 'Outdated') {
      emojiStatus = 'üí§';
      statusPart =
        '–£–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞. –ö—É–ø–∏—Ç–µ —á–ª–µ–Ω—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.';
    } else if (status === 'Solved') {
      emojiStatus = '‚öí';
      statusPart = '–ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.';
    }

    ordersListMsg = ordersListMsg.concat(
      `${index + 1}: `,
      `${emojiStatus} `,
      description,
      '\n',
      statusPart,
      '\n\n',
    );
  });
  ctx.reply(ordersListMsg);
  return ctx.scene.enter('orders');
});

module.exports = orderListScene;
